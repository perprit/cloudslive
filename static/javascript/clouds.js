// Generated by CoffeeScript 1.4.0
(function() {
  var Main;

  Main = (function() {

    function Main() {
      var _this = this;
      this.reftime = 0;
      this.speed = 5;
      this.timeBin = 30000;
      this.freqMax = 80;
      $("#upload-file > input:file").change(function() {
        var form_data, overlay, spinner;
        overlay = $("<div class='overlay'> </div>");
        spinner = $("<div class='spinner'> </div>");
        overlay.appendTo($("body"));
        spinner.appendTo($("body"));
        form_data = new FormData($("#upload-file")[0]);
        return $.ajax({
          type: 'POST',
          url: '/upload',
          data: form_data,
          contentType: false,
          cache: false,
          processData: false,
          async: true,
          success: function(response) {
            var d, i, parsed, _i, _len;
            parsed = JSON.parse(response);
            _this.reftime = +parsed[0].ts;
            for (i = _i = 0, _len = parsed.length; _i < _len; i = ++_i) {
              d = parsed[i];
              parsed[i].ts -= _this.reftime;
            }
            return _this.initialize(parsed);
          },
          error: function(jqXHR, textStatus, errorThrown) {
            return alert("" + textStatus + " ,  " + errorThrown);
          },
          complete: function() {
            overlay.remove();
            return spinner.remove();
          }
        });
      });
      $("#chats-container").perfectScrollbar();
    }

    Main.prototype.initialize = function(chats) {
      this.initializeChats(chats);
      return this.initializeHistogram(chats);
    };

    Main.prototype.initializeChats = function(chats) {
      var addChat, chat, currChats, setTimeoutToChat, _i, _len, _results,
        _this = this;
      currChats = [];
      addChat = function(chat) {
        var newChat;
        currChats.push(chat);
        newChat = d3.select("#chats").selectAll(".chat").data(currChats).enter().append("div").attr("class", "chat");
        newChat.append("span").attr("class", "time").text(function(d) {
          return new Date(_this.reftime + d.ts).hhmmss();
        });
        newChat.append("span").attr("class", "id").style("color", function(d) {
          var hash;
          hash = d.id.hashCode();
          return "#" + ((hash & 0xFF0000) >> 16).toString(16) + ((hash & 0x00FF00) >> 8).toString(16) + (hash & 0x0000FF).toString(16);
        }).text(function(d) {
          return d.id;
        });
        newChat.append("span").attr("class", "colon").text(function(_) {
          return ":";
        });
        newChat.append("span").attr("class", "msg").text(function(d) {
          return d.msg;
        });
        return $("#chats-container").stop().animate({
          scrollTop: $("#chats").height()
        }, 100);
      };
      setTimeoutToChat = function(chat) {
        return setTimeout(function() {
          return addChat(chat);
        }, +chat.ts / _this.speed);
      };
      _results = [];
      for (_i = 0, _len = chats.length; _i < _len; _i++) {
        chat = chats[_i];
        _results.push(setTimeoutToChat(chat));
      }
      return _results;
    };

    Main.prototype.initializeHistogram = function(chats) {
      var addChat, chat, currChatList, height, hist, margin, prevIdx, setTimeoutToChat, svg, width, x, y, _i, _len, _results,
        _this = this;
      margin = {
        top: 0,
        right: 30,
        bottom: 0,
        left: 30
      };
      width = parseInt(d3.select("#histogram").style("width"), 10) - margin.left - margin.right;
      height = parseInt(d3.select("#histogram").style("height"), 10) - margin.top - margin.bottom;
      svg = d3.select("#histogram").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom);
      hist = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      x = d3.scale.linear().domain([0, this.freqMax]).range([0, width]);
      y = d3.scale.linear().domain([chats[0].ts, chats[chats.length - 1].ts]).range([0, height]);
      svg.append("g").attr("class", "axis").attr("transform", "translate(" + (width + margin.left) + "," + margin.top + ")");
      currChatList = [];
      prevIdx = 0;
      addChat = function(chat) {
        var bars, binHeight, idx, _i, _idx, _ref;
        idx = Math.ceil(chat.ts / _this.timeBin);
        if (idx - prevIdx > 1) {
          for (_idx = _i = _ref = prevIdx + 1; _ref <= idx ? _i <= idx : _i >= idx; _idx = _ref <= idx ? ++_i : --_i) {
            currChatList[_idx] = {
              v: 0,
              idxtime: _this.timeBin * idx,
              msgList: []
            };
          }
        }
        if (currChatList[idx] === void 0) {
          currChatList[idx] = {
            v: 1,
            idxtime: _this.timeBin * idx,
            msgList: [chat.msg]
          };
        } else {
          currChatList[idx].v++;
          currChatList[idx].msgList.push(chat.msg);
          if (currChatList[idx].v > _this.freqMax) {
            x = d3.scale.linear().domain([
              0, d3.max(currChatList, function(d) {
                return +d.v;
              })
            ]).range([0, width]);
          }
        }
        prevIdx = idx;
        binHeight = height / currChatList.length;
        y.domain([currChatList[0].idxtime, currChatList[currChatList.length - 1].idxtime]);
        bars = hist.selectAll(".bar");
        bars.data(currChatList).exit().remove();
        bars.data(currChatList).enter().append("rect").attr("class", "bar").style("fill", "steelblue").on("mouseover", function() {
          return d3.select(this).style("fill", "rgb(90, 150, 200)");
        }).on("mouseout", function() {
          return d3.select(this).style("fill", "rgb(70, 130, 180)");
        }).each(function(d) {
          d.x = (width - x(d.v)) / 2;
          return d.y = binHeight * currChatList.length;
        });
        return bars.data(currChatList).attr("height", function(d) {
          return binHeight + 1;
        }).attr("transform", function(d, i) {
          return "translate(" + d.x + "," + d.y + ")";
        }).transition().duration(700).ease("elastic").attr("width", function(d) {
          return x(d.v);
        }).attr("transform", function(d, i) {
          return "translate(" + (width - x(d.v)) / 2 + "," + binHeight * i + ")";
        }).each(function(d, i) {
          d.x = (width - x(d.v)) / 2;
          return d.y = binHeight * i;
        });
      };
      setTimeoutToChat = function(chat) {
        return setTimeout(function() {
          return addChat(chat);
        }, +chat.ts / _this.speed);
      };
      _results = [];
      for (_i = 0, _len = chats.length; _i < _len; _i++) {
        chat = chats[_i];
        _results.push(setTimeoutToChat(chat));
      }
      return _results;
    };

    return Main;

  })();

  $(function() {
    return window.main = new Main;
  });

}).call(this);
