// Generated by CoffeeScript 1.9.3
(function() {
  var Chats, Histogram, Main;

  Main = (function() {
    function Main() {
      $("#upload-file > input:file").change((function(_this) {
        return function() {
          var form_data, overlay, spinner;
          overlay = $("<div class='overlay'> </div>");
          spinner = $("<div class='spinner'> </div>");
          overlay.appendTo($("body"));
          spinner.appendTo($("body"));
          form_data = new FormData($("#upload-file")[0]);
          return $.ajax({
            type: 'POST',
            url: '/upload',
            data: form_data,
            contentType: false,
            cache: false,
            processData: false,
            async: true,
            success: function(response) {
              var parsed;
              parsed = JSON.parse(response);
              return _this.initialize(parsed);
            },
            error: function(jqXHR, textStatus, errorThrown) {
              return alert(textStatus + " ,  " + errorThrown);
            },
            complete: function() {
              overlay.remove();
              return spinner.remove();
            }
          });
        };
      })(this));
    }

    Main.prototype.initialize = function(data) {
      var chats, histogram;
      chats = new Chats(data);
      return histogram = new Histogram(data);
    };

    return Main;

  })();

  Chats = (function() {
    function Chats(data) {
      var chat, chats;
      chats = d3.select("#chats");
      chat = chats.selectAll(".chat").data(data).enter().append("div").attr("class", "chat");
      chat.append("span").attr("class", "id").style("color", function(d) {
        var hash;
        hash = d.id.hashCode();
        return "#" + ((hash & 0xFF0000) >> 16).toString(16) + ((hash & 0x00FF00) >> 8).toString(16) + (hash & 0x0000FF).toString(16);
      }).text(function(d) {
        return d.id;
      });
      chat.append("span").attr("class", "colon").text(function(_) {
        return ":";
      });
      chat.append("span").attr("class", "msg").text(function(d) {
        return d.msg;
      });
    }

    return Chats;

  })();

  Histogram = (function() {
    function Histogram(data) {
      var binSize, binWidth, count, countList, height, hist, histBars, i, idx, j, k, len, len1, margin, svg, ts, tsList, width, x, y;
      margin = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 50
      };
      width = parseInt(d3.select("#histogram").style("width"), 10) - margin.left - margin.right;
      height = parseInt(d3.select("#histogram").style("height"), 10) - margin.top - margin.bottom;
      svg = d3.select("#histogram").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom);
      hist = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      histBars = hist.append("g");
      binSize = 3000;
      tsList = data.map(function(d) {
        return +d.ts;
      });
      countList = [];
      for (j = 0, len = tsList.length; j < len; j++) {
        ts = tsList[j];
        idx = Math.ceil(ts / binSize);
        if (countList[idx] === void 0) {
          countList[idx] = 1;
        } else {
          countList[idx]++;
        }
      }
      for (i = k = 0, len1 = countList.length; k < len1; i = ++k) {
        count = countList[i];
        if (count === void 0) {
          countList[i] = 0;
        }
      }
      x = d3.scale.linear().domain([0, countList.length]).range([0, width]);
      y = d3.scale.linear().domain([
        0, d3.max(countList, function(d) {
          return +d;
        })
      ]).range([height, 0]);
      binWidth = Math.floor(width / countList.length);
      console.log(width, countList.length);
      console.log(binWidth);
      console.log(countList);
      histBars.selectAll(".bar").data(countList).enter().append("rect").attr("class", "bar").attr("width", binWidth).attr("height", (function(_this) {
        return function(d) {
          return height - y(d);
        };
      })(this)).attr("transform", (function(_this) {
        return function(d, i) {
          return "translate(" + x(i) + "," + y(d) + ")";
        };
      })(this));
    }

    return Histogram;

  })();

  $(function() {
    return window.main = new Main;
  });

}).call(this);
